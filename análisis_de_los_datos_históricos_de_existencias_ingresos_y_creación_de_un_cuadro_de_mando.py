# -*- coding: utf-8 -*-
"""Análisis de los datos históricos de existencias/ingresos y creación de un cuadro de mando.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YZoIfvhBg2VWx2hC934e_eDGVigblIwP

Pregunta 1: Utilice yfinance para extraer datos bursátiles

Restablezca el índice, guarde y visualice las cinco primeras filas del marco de datos tesla_data utilizando la función head. Suba una captura de pantalla de los resultados y el código del principio de la Pregunta 1 a los resultados de abajo.
"""

import yfinance as yf

# Descargar datos históricos de las acciones de Tesla
tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="1y")  # Datos del último año

# Mostrar las primeras filas
tesla_data.head()

"""Pregunta 2: Utilizar Webscraping para extraer datos de ingresos de Tesla

Muestre las cinco últimas filas del marco de datos tesla_revenue utilizando la función tail. Suba una captura de pantalla de los resultados.
"""

import requests
from bs4 import BeautifulSoup

# URL de la página con los ingresos de Tesla
url = "https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue"

# Obtener el contenido de la página
response = requests.get(url)
soup = BeautifulSoup(response.content, 'html.parser')

import pandas as pd
import requests
from bs4 import BeautifulSoup

# URL de los ingresos de Tesla en Macrotrends
url = "https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue"

# Encabezados para simular un navegador
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36"
}

# Obtener el contenido de la página
response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, "html.parser")

# Encontrar todas las tablas
tables = soup.find_all("table")

# Buscar la tabla que contiene los ingresos
for table in tables:
    if "Tesla Quarterly Revenue" in str(table):
        revenue_table = table
        break

# Extraer las filas de datos
rows = revenue_table.find_all("tr")
tesla_revenue = []

for row in rows[1:]:  # Ignorar la cabecera
    cols = row.find_all("td")
    if len(cols) == 2:
        date = cols[0].text.strip()
        revenue = cols[1].text.strip().replace("$", "").replace(",", "")
        if revenue:  # Asegurarse de que haya valor
            tesla_revenue.append([date, revenue])

# Crear el DataFrame
tesla_revenue_df = pd.DataFrame(tesla_revenue, columns=["Date", "Revenue"])

# Mostrar las últimas 5 filas
print(tesla_revenue_df.tail())

"""Pregunta 3: Utilice yfinance para extraer datos bursátiles

Restablezca el índice, guarde y visualice las cinco primeras filas del marco de datos gme_data utilizando la función head. Suba a continuación una captura de pantalla de los resultados y el código del principio de la Pregunta 3.
"""

import yfinance as yf
import pandas as pd

# Descargar los datos históricos de GameStop
gme = yf.Ticker("GME")
gme_data = gme.history(period="max")

# Restablecer el índice para convertir la columna 'Date' en una columna regular
gme_data.reset_index(inplace=True)

# Mostrar las primeras cinco filas
print(gme_data.head())

"""Pregunta 4: Utilizar Webscraping para extraer datos de ingresos de la GME

Muestre las cinco últimas filas del marco de datos gme_revenue utilizando la función tail. Suba una captura de pantalla de los resultados.
"""

import pandas as pd
import requests
from bs4 import BeautifulSoup

# URL con los ingresos de GameStop
url = "https://www.macrotrends.net/stocks/charts/GME/gamestop/revenue"

# Obtener el HTML de la página
html_data = requests.get(url).text

# Parsear el HTML con BeautifulSoup
soup = BeautifulSoup(html_data, "html.parser")

# Buscar todas las tablas y seleccionar la correcta
tables = soup.find_all("table")

# Encontrar la tabla que contiene 'GameStop Annual Revenue'
for table in tables:
    if "GameStop Annual Revenue" in str(table):
        revenue_table = table
        break

# Crear listas para almacenar los datos
dates = []
revenues = []

# Extraer las filas de la tabla
for row in revenue_table.find_all("tr")[1:]:
    cols = row.find_all("td")
    if len(cols) == 2:
        date = cols[0].text.strip()
        revenue = cols[1].text.strip().replace("$", "").replace(",", "")
        if revenue != "":
            dates.append(date)
            revenues.append(revenue)

# Crear el DataFrame
gme_revenue = pd.DataFrame({"Date": dates, "Revenue": revenues})

# Mostrar las últimas cinco filas
print(gme_revenue.tail())

"""Pregunta 5: Representar gráficamente las acciones de Tesla

Utilice la función make_graph para representar gráficamente los datos de las acciones de Tesla, proporcione también un título para el gráfico.
"""

import yfinance as yf
import matplotlib.pyplot as plt

# Descargar los datos de Tesla usando yfinance
tesla = yf.Ticker("TSLA")
tesla_data = tesla.history(period="max")

# Restablecer el índice
tesla_data.reset_index(inplace=True)

# Función para graficar
def make_graph(stock_data, title):
    plt.figure(figsize=(14, 6))
    plt.plot(stock_data.Date, stock_data.Close)
    plt.title(title)
    plt.xlabel('Fecha')
    plt.ylabel('Precio de Cierre (USD)')
    plt.grid(True)
    plt.show()

# Usar la función para graficar Tesla
make_graph(tesla_data, 'Histórico de Precio de Cierre de Tesla')

"""Pregunta 6: Representar gráficamente las acciones de GameStop

Utilice la función make_graph para representar gráficamente los datos de existencias de GameStop, proporcione también un título para el gráfico.
"""

import yfinance as yf
import matplotlib.pyplot as plt

# Descargar datos históricos de GME
gme = yf.Ticker("GME")
gme_data = gme.history(period="max")

# Restablecer el índice
gme_data.reset_index(inplace=True)

# Función para graficar (si no está definida, vuelve a incluirla)
def make_graph(stock_data, title):
    plt.figure(figsize=(14, 6))
    plt.plot(stock_data.Date, stock_data.Close)
    plt.title(title)
    plt.xlabel('Fecha')
    plt.ylabel('Precio de Cierre (USD)')
    plt.grid(True)
    plt.show()

# Graficar los datos de GME
make_graph(gme_data, 'Histórico de Precio de Cierre de GameStop')